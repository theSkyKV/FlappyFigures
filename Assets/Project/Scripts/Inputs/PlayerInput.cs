//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Project/Inputs/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Project.Inputs
{
    public partial class @PlayerInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Figure"",
            ""id"": ""9a9a0af6-eb9c-4cb0-aa17-3480d180919d"",
            ""actions"": [
                {
                    ""name"": ""AddForce"",
                    ""type"": ""Button"",
                    ""id"": ""55cb1006-b475-4af0-a62e-1a5735dfd59a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""07d31d40-8f68-44ef-9981-84c83edc8582"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""AddForce"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0220343-57b0-4ff8-bc11-3333badb03bd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""AddForce"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Figure
            m_Figure = asset.FindActionMap("Figure", throwIfNotFound: true);
            m_Figure_AddForce = m_Figure.FindAction("AddForce", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Figure
        private readonly InputActionMap m_Figure;
        private List<IFigureActions> m_FigureActionsCallbackInterfaces = new List<IFigureActions>();
        private readonly InputAction m_Figure_AddForce;
        public struct FigureActions
        {
            private @PlayerInput m_Wrapper;
            public FigureActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @AddForce => m_Wrapper.m_Figure_AddForce;
            public InputActionMap Get() { return m_Wrapper.m_Figure; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(FigureActions set) { return set.Get(); }
            public void AddCallbacks(IFigureActions instance)
            {
                if (instance == null || m_Wrapper.m_FigureActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_FigureActionsCallbackInterfaces.Add(instance);
                @AddForce.started += instance.OnAddForce;
                @AddForce.performed += instance.OnAddForce;
                @AddForce.canceled += instance.OnAddForce;
            }

            private void UnregisterCallbacks(IFigureActions instance)
            {
                @AddForce.started -= instance.OnAddForce;
                @AddForce.performed -= instance.OnAddForce;
                @AddForce.canceled -= instance.OnAddForce;
            }

            public void RemoveCallbacks(IFigureActions instance)
            {
                if (m_Wrapper.m_FigureActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IFigureActions instance)
            {
                foreach (var item in m_Wrapper.m_FigureActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_FigureActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public FigureActions @Figure => new FigureActions(this);
        private int m_KeyboardandMouseSchemeIndex = -1;
        public InputControlScheme KeyboardandMouseScheme
        {
            get
            {
                if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
                return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
            }
        }
        public interface IFigureActions
        {
            void OnAddForce(InputAction.CallbackContext context);
        }
    }
}
